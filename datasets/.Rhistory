}
max(vector_null_dif)
hist(vector_null_dif)
# Suppose your list of numbers is stored in a vector called 'data'
data =  vector_null_dif #ESTO ES UNA DATA NORMAL
# Calculate the mean and standard deviation of the data
mean_data <- mean(data)
sd_data <- sd(data)
# Calculate the lower and upper bounds for one standard deviation away from the mean
lower_bound <- mean_data - 1*sd_data
upper_bound <- mean_data + 1*sd_data
# Calculate the proportion of numbers within one standard deviation away from the mean
proportion <- pnorm(upper_bound, mean_data, sd_data) - pnorm(lower_bound, mean_data, sd_data)
# Print the proportion
print(proportion)
y = filter(dat, Sex == "M" & Diet == "chow") %>% select(Bodyweight) %>% unlist()
y
library(rafalib)
mean_y = mean(y)
sd_y = popsd(y)
low_dist_y = mean_y - sd_y
up_dist_y = mean_y + sd_y
prop_dist_y = pnorm(up_dist_y, mean_y, sd_y) - pnorm(low_dist_y, mean_y, sd_y)
prop_dist_y
# Suppose your list of numbers is stored in a vector called 'data'
data =  vector_null_dif #ESTO ES UNA DATA NORMAL
# Calculate the mean and standard deviation of the data
mean_data <- mean(data)
sd_data <- sd(data)
# Calculate the lower and upper bounds for one standard deviation away from the mean
lower_bound <- mean_data - 1*sd_data
upper_bound <- mean_data + 1*sd_data
# Calculate the proportion of numbers within one standard deviation away from the mean
proportion <- pnorm(upper_bound, mean_data, sd_data) - pnorm(lower_bound, mean_data, sd_data)
# Print the proportion
print(proportion)
y = filter(dat, Sex == "M" & Diet == "chow") %>% select(Bodyweight) %>% unlist()
library(rafalib)
mean_y = mean(y)
sd_y = popsd(y)
low_dist_y = mean_y - sd_y
up_dist_y = mean_y + sd_y
prop_dist_y = pnorm(up_dist_y, mean_y, sd_y) - pnorm(low_dist_y, mean_y, sd_y)
prop_dist_y
mean(dat$Bodyweight)
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/mice_pheno.csv"
filename <- basename(url)
download(url, destfile=filename)
dat = read.csv(filename)
dat = na.omit(dat)
mean(dat$Bodyweight)
mean_y = mean(y)
mean_y
y = filter(dat, Sex == "M" & Diet == "chow") %>% select(Bodyweight) %>% unlist()
mean(dat$Bodyweight)
library(rafalib)
mean_y = mean(y)
mean_y
sd_y = popsd(y)
low_dist_y = mean_y - 2*sd_y
up_dist_y = mean_y + 2*sd_y
prop_dist_y = pnorm(up_dist_y, mean_y, sd_y) - pnorm(low_dist_y, mean_y, sd_y)
prop_dist_y
y = filter(dat, Sex == "M" & Diet == "chow") %>% select(Bodyweight) %>% unlist()
library(rafalib)
mean_y = mean(y)
mean_y
sd_y = popsd(y)
low_dist_y = mean_y - 3*sd_y
up_dist_y = mean_y + 3*sd_y
prop_dist_y = pnorm(up_dist_y, mean_y, sd_y) - pnorm(low_dist_y, mean_y, sd_y)
prop_dist_y
means = mean(dat$Bodyweight)
means = mean(dat$Bodyweight)
sds = popsd(dat$Bodyweight)
low_dist_s = means - 1*sds
up_dist_s = means + 1*sds
prop_dist_y = pnorm(up_dist_s, means, sds) - pnorm(low_dist_s, means, sds)
prop_dist_y
# Instala y carga el paquete rafalib
install.packages("rafalib")
library(rafalib)
# Define y como los pesos de los machos en la dieta de control
y <- filter(dat, Sex == "M" & Diet == "chow") %>% select(Bodyweight) %>% unlist()
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/mice_pheno.csv"
filename <- basename(url)
download(url, destfile=filename)
dat = read.csv(filename)
library(rafalib)
# Define y como los pesos de los machos en la dieta de control
y <- filter(dat, Sex == "M" & Diet == "chow") %>% select(Bodyweight) %>% unlist()
# Calcula la media y la desviación estándar poblacional de los datos
mean_y <- mean(y)
sd_y <- popsd(y)
# Calcula los límites inferior y superior para una desviación estándar de la media
lower_bound <- mean_y - sd_y
upper_bound <- mean_y + sd_y
# Calcula la proporción de ratones dentro de una desviación estándar de la media
proportion <- pnorm(upper_bound, mean_y, sd_y) - pnorm(lower_bound, mean_y, sd_y)
# Imprime la proporción
print(proportion)
filename <- basename(url)
download(url, destfile=filename)
dat = read.csv(filename)
library(rafalib)
# Define y como los pesos de los machos en la dieta de control
y <- filter(dat, Sex == "M" & Diet == "chow") %>% select(Bodyweight) %>% unlist()
# Calcula la media y la desviación estándar poblacional de los datos
mean_y <- mean(y)
sd_y <- popsd(y)
# Calcula los límites inferior y superior para una desviación estándar de la media
lower_bound <- mean_y - sd_y
upper_bound <- mean_y + sd_y
# Calcula la proporción de ratones dentro de una desviación estándar de la media
proportion <- pnorm(upper_bound, mean_y, sd_y) - pnorm(lower_bound, mean_y, sd_y)
# Imprime la proporción
print(proportion)
# Define y como los pesos de los machos en la dieta de control
y <- filter(dat, Sex == "M" & Diet == "chow") %>% select(Bodyweight) %>% unlist()
y
# Calcula la media y la desviación estándar poblacional de los datos
mean_y <- mean(y)
sd_y <- popsd(y)
# Calcula los límites inferior y superior para una desviación estándar de la media
lower_bound <- mean_y - sd_y
upper_bound <- mean_y + sd_y
# Calcula la media y la desviación estándar poblacional de los datos
mean_y <- mean(y)
sd_y <- popsd(y)
# Calcula los límites inferior y superior para una desviación estándar de la media
lower_bound <- mean_y - sd_y
upper_bound <- mean_y + sd_y
# Calcula la proporción de ratones dentro de una desviación estándar de la media
proportion <- pnorm(upper_bound, mean_y, sd_y) - pnorm(lower_bound, mean_y, sd_y)
# Imprime la proporción
print(proportion)
dat = read.csv("mice_pheno.csv")
# Define y como los pesos de los machos en la dieta de control
y <- filter(dat, Sex == "M" & Diet == "chow") %>% select(Bodyweight) %>% unlist()
y
# Calcula la media y la desviación estándar poblacional de los datos
mean_y <- mean(y)
sd_y <- popsd(y)
mean_y
sd_y <- popsd(y)
library(dplyr)
data1 = read.csv("femaleMiceWeights.csv")
View(data1)
data1_chow = filter(data1, Diet == "chow")
data1_chow = select(data1_chow, Bodyweight)
data1_chow = unlist(data1_chow)
data1_chow
mean(data1_chow)
data1_highfat = filter(data1, Diet == "hf") %>% select(Bodyweight) %>% unlist
data1_hightfat
mean(data1_highfat)
diference_mean = mean(data1_highfat) - mean(data1_chow)
diference_mean
poblacion = read.csv("femaleControlsPopulation.csv")
poblacion = unlist(poblacion)
obs_null_dif = abs(mean(data1_chow) - mean(data1_highfat))
RNGkind("Mersenne-Twister", "Inversion", "Rejection")
mean(poblacion)
set.seed(1)
obs_null_dif = abs(mean(data1_chow) - mean(data1_highfat))
RNGkind("Mersenne-Twister", "Inversion", "Rejection")
mean(poblacion)
set.seed(1)
diferencia_promedio1 = abs(mean(sample(poblacion, 5)) - mean(poblacion))
diferencia_promedio1
set.seed(5)
diferencia_promedio2 = abs(mean(sample(poblacion, 5)) - mean(poblacion))
diferencia_promedio2
n = 10000
vector_null_dif = vector("numeric", n)
for(i in 1:n){
chow = (sample(poblacion, 12))
highfat = (sample(poblacion, 12))
vector_null_dif[i] = mean(chow) - mean(highfat)
}
max(vector_null_dif)
hist(vector_null_dif)
mean(abs(vector_null_dif) > obs_null_dif) #P-Value
obs_null_dif
set.seed(1)
m = 10000
vector_null_avg = vector("numeric", m)
x <- unlist(poblacion)
mean(x)
for(i in 1:m){
randomsample = sample(poblacion, 5)
vector_null_avg[i] = mean(randomsample)
}
mean(vector_null_avg > mean(x)) #Proporcion de los promedios (vector null) que son mayores al promedio de x
proporcion <- mean(abs(vector_null_avg - mean(x)) > 1)
proporcion #Proporcion de los promedios que son mayores al promedio de x en 1 gramo
install.packages("gapminder")
data(gapminder)
head(gapminder)
View(gapminder)
vector_x = filter(gapminder, year == "1952") %>% select(lifeExp) %>% unlist()
vector_x
install.packages("gapminder")
mean(vector_x <= 40) #Proporcion de paises que tienen una lifeExp menor o igual a 40
for(i in 1:n){
X2 <- sample(poblacion,50)
averages50[i] <- mean(X2)
}
X2
hist(averages5)
hist(averages50)
a = mean(averages50 >= 23 & averages50 <= 25)
a
hist(averages5)
averages5 <- vector("numeric",n)
for(i in 1:n){
X1 <- sample(poblacion,5)
averages5[i] <- mean(X1)
}
X1
# make averages50
set.seed(1)
n <- 1000
averages50 <- vector("numeric",n)
for(i in 1:n){
X2 <- sample(poblacion,50)
averages50[i] <- mean(X2)
}
X2
hist(averages5)
hist(averages50)
a = mean(averages50 >= 23 & averages50 <= 25)
a
z = pnorm(25, 23.9, 0.43) - pnorm(23, 23.9, 0.43)
z
?pnorm
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/mice_pheno.csv"
filename <- basename(url)
download(url, destfile=filename)
dat = read.csv(filename)
dat = na.omit(dat)
View(dat)
library(dplyr)
datx = filter(dat, Diet == "chow" & Sex == "F") %>% select(Bodyweight) %>% unlist()
datx
xxx = mean(datx) #Media de la data de Chow y Male (Bodyweight)
xxx
library(rafalib)
popsd(datx) #Desviacion estandar
set.seed(2)
rdsx = sample(datx, 25)
aaa = mean(rdsx)
aaa
daty = filter(dat, Diet == "hf" & Sex == "F") %>% select(Bodyweight) %>% unlist()
yyy = mean(daty)
yyy
popsd(daty)
set.seed(2)
rdsy = sample(daty, 25)
bbb =mean(rdsy)
bbb
dif_mean_sample = bbb - aaa
dif_mean_sample
dif_mean_datxy = yyy - xxx
dif_mean_datxy
dif_abs = abs(dif_mean_datxy - dif_mean_sample)
dif_abs
?pnorm
# Suppose your list of numbers is stored in a vector called 'data'
data =  vector_null_dif #ESTO ES UNA DATA NORMAL
# Calculate the mean and standard deviation of the data
mean_data <- mean(data)
sd_data <- sd(data)
# Calculate the lower and upper bounds for one standard deviation away from the mean
lower_bound <- mean_data - 1*sd_data
upper_bound <- mean_data + 1*sd_data
# Calculate the proportion of numbers within one standard deviation away from the mean
proportion <- pnorm(upper_bound, mean_data, sd_data) - pnorm(lower_bound, mean_data, sd_data)
# Print the proportion
print(proportion)
# Instala y carga el paquete rafalib
install.packages("rafalib")
install.packages("rafalib")
library(rafalib)
# Define y como los pesos de los machos en la dieta de control
y <- filter(dat, Sex == "M" & Diet == "chow") %>% select(Bodyweight) %>% unlist()
library(rafalib)
library(dplyr)
# Define y como los pesos de los machos en la dieta de control
y <- filter(dat, Sex == "M" & Diet == "chow") %>% select(Bodyweight) %>% unlist()
y
# Calcula la media y la desviación estándar poblacional de los datos
mean_y <- mean(y)
mean_y
sd_y <- popsd(y)
sd_y
# Calcula los límites inferior y superior para una desviación estándar de la media
lower_bound <- mean_y - sd_y
upper_bound <- mean_y + sd_y
# Calcula la proporción de ratones dentro de una desviación estándar de la media
proportion <- pnorm(upper_bound, mean_y, sd_y) - pnorm(lower_bound, mean_y, sd_y)
# Imprime la proporción
print(proportion)
?popsd
# Define y como los pesos de los machos en la dieta de control
y <- filter(dat, Sex == "M" & Diet == "chow") %>% select(Bodyweight) %>% unlist()
y
# Calcula la media y la desviación estándar poblacional de los datos
mean_y <- mean(y)
mean_y
sd_y <- popsd(y)
sd_y
sds = sd(y)
sds
# Calcula los límites inferior y superior para una desviación estándar de la media
lower_bound <- mean_y - sd_y
upper_bound <- mean_y + sd_y
# Calcula la proporción de ratones dentro de una desviación estándar de la media
proportion <- pnorm(upper_bound, mean_y, sd_y) - pnorm(lower_bound, mean_y, sd_y)
# Imprime la proporción
print(proportion)
# Calcula los límites inferior y superior para una desviación estándar de la media
lower_bound <- mean_y - sds
upper_bound <- mean_y + sds
# Calcula la proporción de ratones dentro de una desviación estándar de la media
proportion <- pnorm(upper_bound, mean_y, sds) - pnorm(lower_bound, mean_y, sds)
# Imprime la proporción
print(proportion)
# Calcula los límites inferior y superior para una desviación estándar de la media
lower_bound <- mean_y - sd_y
upper_bound <- mean_y + sd_y
proportion <- mean(y >= lower_bound & y <= upper_bound)
# Imprime la proporción
print(proportion)
setwd("C:/Users/renat/OneDrive/Escritorio/CS50/Statistics and R")
data = read.csv("mice_pheno.csv")
data = na.omit(data)
library(dplyr)
y = filter(data, Sex == "M" & Diet == "hf") %>% select(Bodyweight) %>% unlist()
y
set.seed(1)
promedios = replicate(1000, sample(y, 25))
promedios
mypar(1,2)
hist(promedios)
qqnorm(promedios)
qqline(promedios)
mean(promedios)
promedios = replicate(1000, mean(sample(y, 25)))
promedios
#Esta funcion permite mostrar dos diagramas a la vez
mypar(1,2)
#Histograma de los 1000 promedios
hist(promedios)
#Normal Q-Q plot
qqnorm(promedios)
qqline(promedios)
mean(promedios)
data = read.csv("mice_pheno.csv")
data = na.omit(data)
library(dplyr)
y = filter(data, Sex == "M" & Diet == "hf") %>% select(Bodyweight) %>% unlist()
y
set.seed(1)
promedios = replicate(1000, mean(sample(y, 25)))
promedios
#Esta funcion permite mostrar dos diagramas a la vez
mypar(1,2)
#Histograma de los 1000 promedios
hist(promedios)
#Normal Q-Q plot
qqnorm(promedios)
qqline(promedios)
mean(promedios)
data = read.csv("mice_pheno.csv")
data = na.omit(data)
library(dplyr)
y <- filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist
set.seed(1)
avgs <- replicate(10000, mean( sample(y, 25)))
mypar(1,2)
hist(avgs)
qqnorm(avgs)
qqline(avgs)
data = read.csv("mice_pheno.csv")
data = na.omit(data)
library(dplyr)
y <- filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist
y <- filter(data, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist
set.seed(1)
avgs <- replicate(10000, mean( sample(y, 25)))
mypar(1,2)
hist(avgs)
qqnorm(avgs)
qqline(avgs)
mean(avgs)
y = filter(data, Sex == "M" & Diet == "chow") %>% select(Bodyweight) %>% unlist()
y
set.seed(1)
promedios = replicate(1000, mean(sample(y, 25)))
promedios
#Esta funcion permite mostrar dos diagramas a la vez
mypar(1,2)
#Histograma de los 1000 promedios
hist(promedios)
#Normal Q-Q plot
qqnorm(promedios)
qqline(promedios)
mean(promedios)
set.seed(1)
promedios = replicate(1000, mean(sample(y, 25)))
promedios
#Esta funcion permite mostrar dos diagramas a la vez
mypar(1,2)
#Histograma de los 1000 promedios
hist(promedios)
#Normal Q-Q plot
qqnorm(promedios)
qqline(promedios)
mean(promedios)
popsd(promedios)
setwd("C:/Users/renat/OneDrive/Escritorio/CS50/Statistics and R")
setwd("C:/Users/renat/OneDrive/Escritorio/CS50/Statistics and R")
population = read.csv("femaleControlsPopulation.csv")
population = na.omit(population)
population = read.csv("femaleControlsPopulation.csv")
population = na.omit(population)
N = 1000
Null = vector("numeric", N)
for(i in N){
control = sample(population, 12)
treatment = sample(population, 12)
Null[i] = mean(control) - mean(treatment)
}
population = read.csv("femaleControlsPopulation.csv")
population = na.omit(population)
N = 100
Null = vector("numeric", N)
for(i in N){
control = sample(population, 12)
treatment = sample(population, 12)
Null[i] = mean(control) - mean(treatment)
}
population = read.csv("femaleControlsPopulation.csv")
population = na.omit(population)
population = unlist(population)
N = 1000
Null = vector("numeric", N)
for(i in N){
control = sample(population, 12)
treatment = sample(population, 12)
Null[i] = mean(control) - mean(treatment)
}
qqnorm(Null)
Null
population = read.csv("femaleControlsPopulation.csv")
population = na.omit(population)
population = unlist(population)
library(dplyr)
N = 1000
Null = vector("numeric", N)
for(i in N){
control = sample(population, 12)
treatment = sample(population, 12)
Null[i] = mean(control) - mean(treatment)
}
Null
Null[i] = mean(treatment) - mean(control)
N = 1000
Null = vector("numeric", N)
for(i in N){
control = sample(population, 12)
treatment = sample(population, 12)
Null[i] = mean(treatment) - mean(control)
}
Null
data1 = read.csv("femaleMiceWeights.csv")
View(data1)
data1_chow = filter(data1, Diet == "chow")
data1_chow = select(data1_chow, Bodyweight)
data1_chow = unlist(data1_chow)
data1_chow
mean(data1_chow)
data1_highfat = filter(data1, Diet == "hf") %>% select(Bodyweight) %>% unlist
data1_hightfat
mean(data1_highfat)
diference_mean = mean(data1_highfat) - mean(data1_chow)
diference_mean
poblacion = read.csv("femaleControlsPopulation.csv")
poblacion = unlist(poblacion)
obs_null_dif = abs(mean(data1_chow) - mean(data1_highfat))
RNGkind("Mersenne-Twister", "Inversion", "Rejection")
mean(poblacion)
set.seed(1)
diferencia_promedio1 = abs(mean(sample(poblacion, 5)) - mean(poblacion))
diferencia_promedio1
set.seed(5)
diferencia_promedio2 = abs(mean(sample(poblacion, 5)) - mean(poblacion))
diferencia_promedio2
n = 10000
vector_null_dif = vector("numeric", n)
for(i in 1:n){
chow = (sample(poblacion, 12))
highfat = (sample(poblacion, 12))
vector_null_dif[i] = mean(chow) - mean(highfat)
}
max(vector_null_dif)
hist(vector_null_dif)
mean(abs(vector_null_dif) > obs_null_dif) #P-Value
